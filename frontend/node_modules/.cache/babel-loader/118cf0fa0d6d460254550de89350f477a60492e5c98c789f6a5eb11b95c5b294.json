{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3000/api/notes';\nclass NoteService {\n  static async getAllNotes() {\n    try {\n      const response = await axios.get(API_BASE_URL);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n      throw error;\n    }\n  }\n  static async getArchivedNotes() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/archived`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching archived notes:', error);\n      throw error;\n    }\n  }\n  static async getNoteById(id) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching note:', error);\n      throw error;\n    }\n  }\n  static async createNote(noteData) {\n    try {\n      const response = await axios.post(API_BASE_URL, noteData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating note:', error);\n      throw error;\n    }\n  }\n  static async updateNote(id, noteData) {\n    try {\n      const response = await axios.put(`${API_BASE_URL}/${id}`, noteData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating note:', error);\n      throw error;\n    }\n  }\n  static async deleteNote(id) {\n    try {\n      const response = await axios.delete(`${API_BASE_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting note:', error);\n      throw error;\n    }\n  }\n  static async archiveNote(id) {\n    try {\n      const response = await axios.patch(`${API_BASE_URL}/${id}/archive`);\n      return response.data;\n    } catch (error) {\n      console.error('Error archiving note:', error);\n      throw error;\n    }\n  }\n  static async unarchiveNote(id) {\n    try {\n      const response = await axios.patch(`${API_BASE_URL}/${id}/unarchive`);\n      return response.data;\n    } catch (error) {\n      console.error('Error unarchiving note:', error);\n      throw error;\n    }\n  }\n  static async searchNotes(searchTerm) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/search?q=${encodeURIComponent(searchTerm)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error searching notes:', error);\n      throw error;\n    }\n  }\n}\nexport { NoteService };","map":{"version":3,"names":["axios","API_BASE_URL","NoteService","getAllNotes","response","get","data","error","console","getArchivedNotes","getNoteById","id","createNote","noteData","post","updateNote","put","deleteNote","delete","archiveNote","patch","unarchiveNote","searchNotes","searchTerm","encodeURIComponent"],"sources":["C:/Users/geron/Desktop/notas-app/notes-app/frontend/src/services/NoteService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:3000/api/notes';\r\n\r\nclass NoteService {\r\n  static async getAllNotes() {\r\n    try {\r\n      const response = await axios.get(API_BASE_URL);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching notes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getArchivedNotes() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/archived`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching archived notes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getNoteById(id) {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching note:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async createNote(noteData) {\r\n    try {\r\n      const response = await axios.post(API_BASE_URL, noteData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating note:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateNote(id, noteData) {\r\n    try {\r\n      const response = await axios.put(`${API_BASE_URL}/${id}`, noteData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating note:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async deleteNote(id) {\r\n    try {\r\n      const response = await axios.delete(`${API_BASE_URL}/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting note:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async archiveNote(id) {\r\n    try {\r\n      const response = await axios.patch(`${API_BASE_URL}/${id}/archive`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error archiving note:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async unarchiveNote(id) {\r\n    try {\r\n      const response = await axios.patch(`${API_BASE_URL}/${id}/unarchive`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error unarchiving note:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async searchNotes(searchTerm) {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/search?q=${encodeURIComponent(searchTerm)}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error searching notes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport { NoteService };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}